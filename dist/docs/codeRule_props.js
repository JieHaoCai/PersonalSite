import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "VUE3 相关",
        "link": "docs/vue3.html"
    },
    'next': {
        "text": "使用 Redux",
        "link": "docs/redux.html"
    },
    config: { "root": "/", ...projectConfig, branch: '' },
    'pagePath': "docs/codeRule.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "docs/codeRule.html",
    'title': "前端代码规范插件配置",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>前端代码规范插件配置</h1>\n<h2 id="%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD">插件下载<a class="anchor" href="#%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD">§</a></h2>\n<ol>\n<li>插件市场下载 eslint</li>\n<li>下载 Prettier</li>\n</ol>\n<h2 id="%E9%85%8D%E7%BD%AE">配置<a class="anchor" href="#%E9%85%8D%E7%BD%AE">§</a></h2>\n<p>在.vscode/settings.json 中进行配置</p>\n<pre class="language-autoit"><code class="language-autoit">{\n    <span class="token string">"files.eol"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n    <span class="token string">"editor.tabSize"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token string">"editor.formatOnSave"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">"editor.defaultFormatter"</span><span class="token punctuation">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>\n        <span class="token operator">/</span><span class="token operator">/</span> 启用保存时自动修复eslint<span class="token punctuation">,</span>默认只支持<span class="token punctuation">.</span>js文件\n    <span class="token string">"editor.codeActionsOnSave"</span><span class="token punctuation">:</span> {\n        <span class="token string">"source.fixAll.eslint"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>\n    }<span class="token punctuation">,</span>\n    <span class="token string">"eslint.validate"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"javascript"</span><span class="token punctuation">,</span> <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span> <span class="token string">"typescript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string">"typescript.tsdk"</span><span class="token punctuation">:</span> <span class="token string">"node_modules/typescript/lib"</span>\n}\n\n</code></pre>\n<h1>Prettier</h1>\n<p>安装</p>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev prettier\n</code></pre>\n<p>根目录创建文件<strong>prettier.config.js</strong></p>\n<p>配置（直接复制即可）</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// prettier.config.js or .prettierrc.js</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 一行最多 100 字符</span>\n  printWidth<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n  <span class="token comment">// 使用 4 个空格缩进</span>\n  tabWidth<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token comment">// 不使用缩进符，而使用空格</span>\n  useTabs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 行尾需要有分号</span>\n  semi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 使用单引号</span>\n  singleQuote<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 对象的 key 仅在必要时用引号</span>\n  quoteProps<span class="token operator">:</span> <span class="token string">"as-needed"</span><span class="token punctuation">,</span>\n  <span class="token comment">// jsx 不使用单引号，而使用双引号</span>\n  jsxSingleQuote<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 末尾不需要逗号</span>\n  trailingComma<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 大括号内的首尾需要空格</span>\n  bracketSpacing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// jsx 标签的反尖括号需要换行</span>\n  jsxBracketSameLine<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 箭头函数，只有一个参数的时候，也需要括号</span>\n  arrowParens<span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 每个文件格式化的范围是文件的全部内容</span>\n  rangeStart<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  rangeEnd<span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>\n  <span class="token comment">// 不需要写文件开头的 @prettier</span>\n  requirePragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 不需要自动在文件开头插入 @prettier</span>\n  insertPragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 使用默认的折行标准</span>\n  proseWrap<span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 根据显示样式决定 html 要不要折行</span>\n  htmlWhitespaceSensitivity<span class="token operator">:</span> <span class="token string">"css"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 换行符使用 lf</span>\n  endOfLine<span class="token operator">:</span> <span class="token string">"lf"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h1>ESLint</h1>\n<p>ESLint 原生的规则和 <code>@typescript-eslint/eslint-plugin</code> 的规则太多了，而且原生的规则有一些在 TypeScript 中支持的不好，需要禁用掉。</p>\n<p>这里我推荐使用 <a href="https://github.com/AlloyTeam/eslint-config-alloy#typescript">AlloyTeam ESLint 规则中的 TypeScript 版本</a>，它已经为我们提供了一套完善的配置规则，并且与 Prettier 是完全兼容的（eslint-config-alloy 不包含任何代码格式的规则，代码格式的问题交给更专业的 Prettier 去处理）。</p>\n<p>安装</p>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-config-alloy\n</code></pre>\n<p><strong>最新特性：eslint-config-alloy 现已支持 TypeScript 5.0</strong>\n如果你使用的是 TypeScript 4.0，请安装旧版 <code>npm install --save-dev eslint-config-alloy@4</code></p>\n<p><strong>最新特性：eslint-config-alloy 现已支持 Vue 3.0</strong>\n如果你使用的是 Vue 2.0，请安装旧版 <code>npm install --save-dev eslint-config-alloy@3</code></p>\n<p>AlloyTeam ESLint 规则不仅是一套先进的适用于 React/Vue/Typescript 项目的 ESLint 配置规范，而且也是你配置个性化 ESLint 规则的最佳参考。</p>\n<p>创建文件.eslintrc.js</p>\n<p>配置</p>\n<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"alloy"</span><span class="token punctuation">,</span> <span class="token string">"alloy/typescript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  env<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 您的环境变量（包含多个预定义的全局变量）</span>\n    <span class="token comment">// Your environments (which contains several predefined global variables)</span>\n    <span class="token comment">//</span>\n    <span class="token comment">// browser: true,</span>\n    <span class="token comment">// node: true,</span>\n    <span class="token comment">// mocha: true,</span>\n    <span class="token comment">// jest: true,</span>\n    <span class="token comment">// jquery: true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  globals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 您的全局变量（设置为 false 表示它不允许被重新赋值）</span>\n    <span class="token comment">// Your global variables (setting to false means it\'s not allowed to be reassigned)</span>\n    <span class="token comment">//</span>\n    <span class="token comment">// myGlobal: false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 自定义您的规则</span>\n    <span class="token comment">// Customize your rules</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>里面的 rules 配置跟 eslint 的配置一样，本身就是他的二次封装，所以都是支持的</p>\n<h1>检查 tsx</h1>\n<p>如果需要同时支持 tsx，需要安装</p>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint-plugin-react\n</code></pre>\n<h4 id="packagejson-%E4%B8%AD%E7%9A%84-scriptseslint-%E6%B7%BB%E5%8A%A0-tsx-%E5%90%8E%E7%BC%80">package.json 中的 scripts.eslint 添加 <code>.tsx</code> 后缀<a class="anchor" href="#packagejson-%E4%B8%AD%E7%9A%84-scriptseslint-%E6%B7%BB%E5%8A%A0-tsx-%E5%90%8E%E7%BC%80">§</a></h4>\n<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"eslint src --ext .ts,.tsx"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="vscode-%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%B0%E5%A2%9E-typescript-react-%E6%A3%80%E6%9F%A5">VSCode 的配置中新增 typescript react 检查<a class="anchor" href="#vscode-%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%B0%E5%A2%9E-typescript-react-%E6%A3%80%E6%9F%A5">§</a></h4>\n<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"files.eol"</span><span class="token operator">:</span> <span class="token string">"\n"</span><span class="token punctuation">,</span>\n  <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 启用保存时自动修复eslint,默认只支持.js文件</span>\n  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">"javascript"</span><span class="token punctuation">,</span>\n    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"typescript"</span><span class="token punctuation">,</span>\n      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"typescriptreact"</span><span class="token punctuation">,</span>\n      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"typescript.tsdk"</span><span class="token operator">:</span> <span class="token string">"node_modules/typescript/lib"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>配置</p>\n<p><a href="https://github.com/AlloyTeam/eslint-config-alloy#typescript-react">https://github.com/AlloyTeam/eslint-config-alloy#typescript-react</a></p>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@18.2.0/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@18.2.0/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Power By",
        React.createElement("a", { href: "https://github.com/JieHaoCai", target: "_blank" }, "JsonTsai")),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u524D\u7AEF\u4EE3\u7801\u89C4\u8303\u63D2\u4EF6\u914D\u7F6E"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD">插件下载<a class="anchor" href="#%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD">§</a></h2>\n<ol>\n<li>插件市场下载 eslint</li>\n<li>下载 Prettier</li>\n</ol>\n<h2 id="%E9%85%8D%E7%BD%AE">配置<a class="anchor" href="#%E9%85%8D%E7%BD%AE">§</a></h2>\n<p>在.vscode/settings.json 中进行配置</p>\n<pre class="language-autoit"><code class="language-autoit">{\n    <span class="token string">"files.eol"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n    <span class="token string">"editor.tabSize"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n    <span class="token string">"editor.formatOnSave"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">"editor.defaultFormatter"</span><span class="token punctuation">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>\n        <span class="token operator">/</span><span class="token operator">/</span> 启用保存时自动修复eslint<span class="token punctuation">,</span>默认只支持<span class="token punctuation">.</span>js文件\n    <span class="token string">"editor.codeActionsOnSave"</span><span class="token punctuation">:</span> {\n        <span class="token string">"source.fixAll.eslint"</span><span class="token punctuation">:</span> <span class="token boolean">true</span>\n    }<span class="token punctuation">,</span>\n    <span class="token string">"eslint.validate"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"javascript"</span><span class="token punctuation">,</span> <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span> <span class="token string">"typescript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string">"typescript.tsdk"</span><span class="token punctuation">:</span> <span class="token string">"node_modules/typescript/lib"</span>\n}\n\n</code></pre>\n<h1>Prettier</h1>\n<p>安装</p>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev prettier\n</code></pre>\n<p>根目录创建文件<strong>prettier.config.js</strong></p>\n<p>配置（直接复制即可）</p>\n<pre class="language-js"><code class="language-js"><span class="token comment">// prettier.config.js or .prettierrc.js</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 一行最多 100 字符</span>\n  printWidth<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>\n  <span class="token comment">// 使用 4 个空格缩进</span>\n  tabWidth<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token comment">// 不使用缩进符，而使用空格</span>\n  useTabs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 行尾需要有分号</span>\n  semi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 使用单引号</span>\n  singleQuote<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// 对象的 key 仅在必要时用引号</span>\n  quoteProps<span class="token operator">:</span> <span class="token string">"as-needed"</span><span class="token punctuation">,</span>\n  <span class="token comment">// jsx 不使用单引号，而使用双引号</span>\n  jsxSingleQuote<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 末尾不需要逗号</span>\n  trailingComma<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 大括号内的首尾需要空格</span>\n  bracketSpacing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token comment">// jsx 标签的反尖括号需要换行</span>\n  jsxBracketSameLine<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 箭头函数，只有一个参数的时候，也需要括号</span>\n  arrowParens<span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 每个文件格式化的范围是文件的全部内容</span>\n  rangeStart<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  rangeEnd<span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>\n  <span class="token comment">// 不需要写文件开头的 @prettier</span>\n  requirePragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 不需要自动在文件开头插入 @prettier</span>\n  insertPragma<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token comment">// 使用默认的折行标准</span>\n  proseWrap<span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 根据显示样式决定 html 要不要折行</span>\n  htmlWhitespaceSensitivity<span class="token operator">:</span> <span class="token string">"css"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 换行符使用 lf</span>\n  endOfLine<span class="token operator">:</span> <span class="token string">"lf"</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h1>ESLint</h1>\n<p>ESLint 原生的规则和 <code>@typescript-eslint/eslint-plugin</code> 的规则太多了，而且原生的规则有一些在 TypeScript 中支持的不好，需要禁用掉。</p>\n<p>这里我推荐使用 <a href="https://github.com/AlloyTeam/eslint-config-alloy#typescript">AlloyTeam ESLint 规则中的 TypeScript 版本</a>，它已经为我们提供了一套完善的配置规则，并且与 Prettier 是完全兼容的（eslint-config-alloy 不包含任何代码格式的规则，代码格式的问题交给更专业的 Prettier 去处理）。</p>\n<p>安装</p>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint typescript @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-config-alloy\n</code></pre>\n<p><strong>最新特性：eslint-config-alloy 现已支持 TypeScript 5.0</strong>\n如果你使用的是 TypeScript 4.0，请安装旧版 <code>npm install --save-dev eslint-config-alloy@4</code></p>\n<p><strong>最新特性：eslint-config-alloy 现已支持 Vue 3.0</strong>\n如果你使用的是 Vue 2.0，请安装旧版 <code>npm install --save-dev eslint-config-alloy@3</code></p>\n<p>AlloyTeam ESLint 规则不仅是一套先进的适用于 React/Vue/Typescript 项目的 ESLint 配置规范，而且也是你配置个性化 ESLint 规则的最佳参考。</p>\n<p>创建文件.eslintrc.js</p>\n<p>配置</p>\n<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"alloy"</span><span class="token punctuation">,</span> <span class="token string">"alloy/typescript"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  env<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 您的环境变量（包含多个预定义的全局变量）</span>\n    <span class="token comment">// Your environments (which contains several predefined global variables)</span>\n    <span class="token comment">//</span>\n    <span class="token comment">// browser: true,</span>\n    <span class="token comment">// node: true,</span>\n    <span class="token comment">// mocha: true,</span>\n    <span class="token comment">// jest: true,</span>\n    <span class="token comment">// jquery: true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  globals<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 您的全局变量（设置为 false 表示它不允许被重新赋值）</span>\n    <span class="token comment">// Your global variables (setting to false means it\'s not allowed to be reassigned)</span>\n    <span class="token comment">//</span>\n    <span class="token comment">// myGlobal: false</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  rules<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 自定义您的规则</span>\n    <span class="token comment">// Customize your rules</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<p>里面的 rules 配置跟 eslint 的配置一样，本身就是他的二次封装，所以都是支持的</p>\n<h1>检查 tsx</h1>\n<p>如果需要同时支持 tsx，需要安装</p>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev eslint-plugin-react\n</code></pre>\n<h4 id="packagejson-%E4%B8%AD%E7%9A%84-scriptseslint-%E6%B7%BB%E5%8A%A0-tsx-%E5%90%8E%E7%BC%80">package.json 中的 scripts.eslint 添加 <code>.tsx</code> 后缀<a class="anchor" href="#packagejson-%E4%B8%AD%E7%9A%84-scriptseslint-%E6%B7%BB%E5%8A%A0-tsx-%E5%90%8E%E7%BC%80">§</a></h4>\n<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"eslint src --ext .ts,.tsx"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<h4 id="vscode-%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%B0%E5%A2%9E-typescript-react-%E6%A3%80%E6%9F%A5">VSCode 的配置中新增 typescript react 检查<a class="anchor" href="#vscode-%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%B0%E5%A2%9E-typescript-react-%E6%A3%80%E6%9F%A5">§</a></h4>\n<pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"files.eol"</span><span class="token operator">:</span> <span class="token string">"\n"</span><span class="token punctuation">,</span>\n  <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token string">"esbenp.prettier-vscode"</span><span class="token punctuation">,</span>\n  <span class="token comment">// 启用保存时自动修复eslint,默认只支持.js文件</span>\n  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">"javascript"</span><span class="token punctuation">,</span>\n    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"typescript"</span><span class="token punctuation">,</span>\n      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"typescriptreact"</span><span class="token punctuation">,</span>\n      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">"typescript.tsdk"</span><span class="token operator">:</span> <span class="token string">"node_modules/typescript/lib"</span>\n<span class="token punctuation">}</span>\n</code></pre>\n<p>配置</p>\n<p><a href="https://github.com/AlloyTeam/eslint-config-alloy#typescript-react">https://github.com/AlloyTeam/eslint-config-alloy#typescript-react</a></p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD" }, "\u63D2\u4EF6\u4E0B\u8F7D")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%85%8D%E7%BD%AE" }, "\u914D\u7F6E")))),
    'author': undefined,
    'contributors': [],
    'date': "2023-07-09T04:34:25.511Z",
    'updated': null,
    'excerpt': "插件下载 1. 插件市场下载 eslint 2. 下载 Prettier 配置 在.vscode/settings.json 中进行配置 { \"files.eol\": \"\", \"editor.tabSize\": 4, \"editor.formatOnSave\": true, \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "介绍",
            "link": "docs/index.html",
            "pagePath": "docs/index.md"
        },
        {
            "text": "VUE3 相关",
            "link": "docs/vue3.html",
            "pagePath": "docs/vue3.md"
        },
        {
            "text": "前端代码规范插件配置",
            "link": "docs/codeRule.html",
            "pagePath": "docs/codeRule.md"
        },
        {
            "text": "使用 Redux",
            "link": "docs/redux.html",
            "pagePath": "docs/redux.md"
        }
    ]
};
