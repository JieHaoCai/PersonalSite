import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "前端代码规范插件配置",
        "link": "docs/codeRule.html"
    },
    'next': undefined,
    config: { "root": "/", ...projectConfig, branch: '' },
    'pagePath': "docs/redux.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "docs/redux.html",
    'title': "使用 Redux",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>使用 Redux</h1>\n<h2 id="%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6">安装插件<a class="anchor" href="#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6">§</a></h2>\n<p>react-redux</p>\n<p>redux:(react-redux 需要依赖于 redux 的 store)</p>\n<p>redux-thunk：异步</p>\n<p>redux-devtools-extension:调试工具</p>\n<h2 id="%E9%85%8D%E7%BD%AE-store">配置 store<a class="anchor" href="#%E9%85%8D%E7%BD%AE-store">§</a></h2>\n<p>在 src 文件下，新建一个 store 的文件夹，里面需要有以下文件：</p>\n<ul>\n<li>reducers 文件夹（存放要完成的工作，本质上是一个函数）</li>\n<li>actions 文件夹(存放要完成工作需要准备的东西，本质上是一个函数)</li>\n<li>actionsTypes 文件夹（统一管理 actions 的动作类型）</li>\n<li>index.js</li>\n</ul>\n<h3 id="indexjs%E6%A8%A1%E6%9D%BF">index.js（模板）<a class="anchor" href="#indexjs%E6%A8%A1%E6%9D%BF">§</a></h3>\n<p>模板（可以直接复制使用）</p>\n<pre class="language-autoit"><code class="language-autoit">import { legacy_createStore as createStore<span class="token punctuation">,</span> applyMiddleware } from <span class="token string">\'redux\'</span><span class="token comment">;</span>\nimport thunk from <span class="token string">\'redux-thunk\'</span><span class="token comment">;</span>\nimport reducer from <span class="token string">\'./reducers\'</span><span class="token comment">;</span>\nimport {composeWithDevTools} from <span class="token string">\'redux-devtools-extension\'</span>\nexport <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span><span class="token function">composeWithDevTools</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 id="reducers">reducers<a class="anchor" href="#reducers">§</a></h2>\n<ul>\n<li>index.js(统一管理所有的 reduces)</li>\n<li>动作.js(名字按照你要执行的工作来命名)，例如 add.js</li>\n</ul>\n<h4 id="indexjs%E6%A8%A1%E6%9D%BF-1">index.js(模板)<a class="anchor" href="#indexjs%E6%A8%A1%E6%9D%BF-1">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">import { combineReducers } from <span class="token string">"redux"</span><span class="token comment">;</span>\nimport a from <span class="token string">"./a"</span><span class="token comment">;</span>\nimport b from <span class="token string">"./b"</span><span class="token comment">;</span>\nimport xml from <span class="token string">"./xmlForm"</span><span class="token comment">;</span>\nimport xmlModifyForm from <span class="token string">"./xmlModifyForm"</span><span class="token comment">;</span>\nexport <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span>{\n    a<span class="token punctuation">,</span>\n    b<span class="token punctuation">,</span>\n    xml<span class="token punctuation">,</span>\n    xmlModifyForm\n  }<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<p>引入所有的动作文件并统一的暴露出去</p>\n<h4 id="ajs">a.js<a class="anchor" href="#ajs">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">import <span class="token operator">*</span> as types from <span class="token string">"../actionTypes"</span>\n<span class="token keyword">const</span> initState <span class="token operator">=</span> {\n    name<span class="token punctuation">:</span> <span class="token string">"xiaoming"</span>\n}\n\nexport <span class="token keyword">default</span> function <span class="token function">a</span><span class="token punctuation">(</span>state <span class="token operator">=</span> initState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> {\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> {\n        <span class="token keyword">case</span> types<span class="token punctuation">.</span>CHANGE_NAME<span class="token punctuation">:</span>\n            return {\n                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span>\n                name<span class="token punctuation">:</span> action<span class="token punctuation">.</span>params<span class="token punctuation">,</span>\n            }<span class="token comment">;</span>\n\n        <span class="token keyword">default</span><span class="token punctuation">:</span>\n            return state<span class="token comment">;</span>\n    }\n}\n</code></pre>\n<p>接收两个参数，一个是初始值状态 state,另一个是要完成的动作</p>\n<h2 id="action">action<a class="anchor" href="#action">§</a></h2>\n<h4 id="indexjs%E6%A8%A1%E6%9D%BF-2">index.js(模板)<a class="anchor" href="#indexjs%E6%A8%A1%E6%9D%BF-2">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">import {changeName} from <span class="token string">"./a"</span>\nimport {changeAge} from <span class="token string">"./b"</span>\nimport {changeXml<span class="token punctuation">,</span>changeXmlModify} from <span class="token string">"./xmlForm"</span>\n\nexport {\n    changeName<span class="token punctuation">,</span>\n    changeAge<span class="token punctuation">,</span>\n    changeXml<span class="token punctuation">,</span>\n    changeXmlModify\n}\n</code></pre>\n<p>接收所有动作文件的动作，并统一暴露出去</p>\n<h4 id="ajs-1">a.js<a class="anchor" href="#ajs-1">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">import <span class="token operator">*</span> as types from <span class="token string">"../actionTypes"</span><span class="token comment">;</span>\n\nexport <span class="token keyword">const</span> changeName <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n    return {\n      type<span class="token punctuation">:</span> types<span class="token punctuation">.</span>CHANGE_NAME<span class="token punctuation">,</span>\n      params\n    }<span class="token comment">;</span>\n  }\n</code></pre>\n<p><strong>注意：return 后面一定要跟花括号，否则报错</strong></p>\n<h2 id="actiontypes%E5%8F%AF%E4%BB%A5%E4%B8%8D%E8%A6%81">actionTypes(可以不要)<a class="anchor" href="#actiontypes%E5%8F%AF%E4%BB%A5%E4%B8%8D%E8%A6%81">§</a></h2>\n<h4 id="indexjs">index.js<a class="anchor" href="#indexjs">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">import {CHANGE_NAME} from <span class="token string">"./a"</span><span class="token comment">;</span>\nimport {CHANGE_AGE} from <span class="token string">"./b"</span><span class="token comment">;</span>\nimport {CHANGE_XML<span class="token punctuation">,</span>CHANGE_XML_Modify} from <span class="token string">"./xmlForm"</span><span class="token comment">;</span>\n\nexport {\n    CHANGE_NAME<span class="token punctuation">,</span>\n    CHANGE_AGE<span class="token punctuation">,</span>\n    CHANGE_XML<span class="token punctuation">,</span>\n    CHANGE_XML_Modify\n}\n</code></pre>\n<h4 id="ajs-2">a.js<a class="anchor" href="#ajs-2">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">export <span class="token keyword">const</span> CHANGE_NAME <span class="token operator">=</span>  <span class="token string">"CHANGE_NAME"</span>\n\n\n</code></pre>\n<h1>重要</h1>\n<p>在 App.js 中</p>\n<pre class="language-autoit"><code class="language-autoit">import { Provider } from <span class="token string">\'react-redux\'</span><span class="token comment">;</span>\nimport store from <span class="token string">"./store"</span><span class="token comment">;</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    return <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>ConfigProvider locale<span class="token operator">=</span>{zhCN}<span class="token operator">></span>\n        <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span>{store}<span class="token operator">></span>\n          <span class="token operator">&lt;</span>Router <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>ConfigProvider<span class="token operator">></span>\n\n    <span class="token punctuation">)</span><span class="token comment">;</span>\n  }\n\n</code></pre>\n<h2 id="%E4%BD%BF%E7%94%A8">使用<a class="anchor" href="#%E4%BD%BF%E7%94%A8">§</a></h2>\n<h3 id="%E6%8E%A5%E6%94%B6%E6%96%B9">接收方<a class="anchor" href="#%E6%8E%A5%E6%94%B6%E6%96%B9">§</a></h3>\n<p>使用 useSelector</p>\n<pre class="language-autoit"><code class="language-autoit">import { useSelector } from <span class="token string">\'react-redux\'</span>\n<span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>state<span class="token punctuation">.</span>a<span class="token punctuation">)</span>\n</code></pre>\n<p>useSelector(state=&gt;state.reducers 中的文件名)，然后使用一个变量去接收</p>\n<p>这样变量就能拿到 store 里面对应文件中的所有状态</p>\n<h3 id="%E5%8F%91%E9%80%81%E6%96%B9">发送方<a class="anchor" href="#%E5%8F%91%E9%80%81%E6%96%B9">§</a></h3>\n<pre class="language-autoit"><code class="language-autoit">import { useDispatch } from <span class="token string">\'react-redux\'</span>\nimport { changeXmlModify } from <span class="token string">\'../../../../store/actions\'</span>\n<span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">changeXmlModify</span><span class="token punctuation">(</span>campaignForm<span class="token punctuation">.</span>xml<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>useDispatch(action 名称（参数）)</p>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@18.2.0/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@18.2.0/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Power By",
        React.createElement("a", { href: "https://github.com/JieHaoCai", target: "_blank" }, "JsonTsai")),
    'contentTitle': React.createElement("h1", { key: "0" }, "\u4F7F\u7528 Redux"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h2 id="%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6">安装插件<a class="anchor" href="#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6">§</a></h2>\n<p>react-redux</p>\n<p>redux:(react-redux 需要依赖于 redux 的 store)</p>\n<p>redux-thunk：异步</p>\n<p>redux-devtools-extension:调试工具</p>\n<h2 id="%E9%85%8D%E7%BD%AE-store">配置 store<a class="anchor" href="#%E9%85%8D%E7%BD%AE-store">§</a></h2>\n<p>在 src 文件下，新建一个 store 的文件夹，里面需要有以下文件：</p>\n<ul>\n<li>reducers 文件夹（存放要完成的工作，本质上是一个函数）</li>\n<li>actions 文件夹(存放要完成工作需要准备的东西，本质上是一个函数)</li>\n<li>actionsTypes 文件夹（统一管理 actions 的动作类型）</li>\n<li>index.js</li>\n</ul>\n<h3 id="indexjs%E6%A8%A1%E6%9D%BF">index.js（模板）<a class="anchor" href="#indexjs%E6%A8%A1%E6%9D%BF">§</a></h3>\n<p>模板（可以直接复制使用）</p>\n<pre class="language-autoit"><code class="language-autoit">import { legacy_createStore as createStore<span class="token punctuation">,</span> applyMiddleware } from <span class="token string">\'redux\'</span><span class="token comment">;</span>\nimport thunk from <span class="token string">\'redux-thunk\'</span><span class="token comment">;</span>\nimport reducer from <span class="token string">\'./reducers\'</span><span class="token comment">;</span>\nimport {composeWithDevTools} from <span class="token string">\'redux-devtools-extension\'</span>\nexport <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span><span class="token function">composeWithDevTools</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 id="reducers">reducers<a class="anchor" href="#reducers">§</a></h2>\n<ul>\n<li>index.js(统一管理所有的 reduces)</li>\n<li>动作.js(名字按照你要执行的工作来命名)，例如 add.js</li>\n</ul>\n<h4 id="indexjs%E6%A8%A1%E6%9D%BF-1">index.js(模板)<a class="anchor" href="#indexjs%E6%A8%A1%E6%9D%BF-1">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">import { combineReducers } from <span class="token string">"redux"</span><span class="token comment">;</span>\nimport a from <span class="token string">"./a"</span><span class="token comment">;</span>\nimport b from <span class="token string">"./b"</span><span class="token comment">;</span>\nimport xml from <span class="token string">"./xmlForm"</span><span class="token comment">;</span>\nimport xmlModifyForm from <span class="token string">"./xmlModifyForm"</span><span class="token comment">;</span>\nexport <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span>{\n    a<span class="token punctuation">,</span>\n    b<span class="token punctuation">,</span>\n    xml<span class="token punctuation">,</span>\n    xmlModifyForm\n  }<span class="token punctuation">)</span><span class="token comment">;</span>\n</code></pre>\n<p>引入所有的动作文件并统一的暴露出去</p>\n<h4 id="ajs">a.js<a class="anchor" href="#ajs">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">import <span class="token operator">*</span> as types from <span class="token string">"../actionTypes"</span>\n<span class="token keyword">const</span> initState <span class="token operator">=</span> {\n    name<span class="token punctuation">:</span> <span class="token string">"xiaoming"</span>\n}\n\nexport <span class="token keyword">default</span> function <span class="token function">a</span><span class="token punctuation">(</span>state <span class="token operator">=</span> initState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> {\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> {\n        <span class="token keyword">case</span> types<span class="token punctuation">.</span>CHANGE_NAME<span class="token punctuation">:</span>\n            return {\n                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>state<span class="token punctuation">,</span>\n                name<span class="token punctuation">:</span> action<span class="token punctuation">.</span>params<span class="token punctuation">,</span>\n            }<span class="token comment">;</span>\n\n        <span class="token keyword">default</span><span class="token punctuation">:</span>\n            return state<span class="token comment">;</span>\n    }\n}\n</code></pre>\n<p>接收两个参数，一个是初始值状态 state,另一个是要完成的动作</p>\n<h2 id="action">action<a class="anchor" href="#action">§</a></h2>\n<h4 id="indexjs%E6%A8%A1%E6%9D%BF-2">index.js(模板)<a class="anchor" href="#indexjs%E6%A8%A1%E6%9D%BF-2">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">import {changeName} from <span class="token string">"./a"</span>\nimport {changeAge} from <span class="token string">"./b"</span>\nimport {changeXml<span class="token punctuation">,</span>changeXmlModify} from <span class="token string">"./xmlForm"</span>\n\nexport {\n    changeName<span class="token punctuation">,</span>\n    changeAge<span class="token punctuation">,</span>\n    changeXml<span class="token punctuation">,</span>\n    changeXmlModify\n}\n</code></pre>\n<p>接收所有动作文件的动作，并统一暴露出去</p>\n<h4 id="ajs-1">a.js<a class="anchor" href="#ajs-1">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">import <span class="token operator">*</span> as types from <span class="token string">"../actionTypes"</span><span class="token comment">;</span>\n\nexport <span class="token keyword">const</span> changeName <span class="token operator">=</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> {\n    return {\n      type<span class="token punctuation">:</span> types<span class="token punctuation">.</span>CHANGE_NAME<span class="token punctuation">,</span>\n      params\n    }<span class="token comment">;</span>\n  }\n</code></pre>\n<p><strong>注意：return 后面一定要跟花括号，否则报错</strong></p>\n<h2 id="actiontypes%E5%8F%AF%E4%BB%A5%E4%B8%8D%E8%A6%81">actionTypes(可以不要)<a class="anchor" href="#actiontypes%E5%8F%AF%E4%BB%A5%E4%B8%8D%E8%A6%81">§</a></h2>\n<h4 id="indexjs">index.js<a class="anchor" href="#indexjs">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">import {CHANGE_NAME} from <span class="token string">"./a"</span><span class="token comment">;</span>\nimport {CHANGE_AGE} from <span class="token string">"./b"</span><span class="token comment">;</span>\nimport {CHANGE_XML<span class="token punctuation">,</span>CHANGE_XML_Modify} from <span class="token string">"./xmlForm"</span><span class="token comment">;</span>\n\nexport {\n    CHANGE_NAME<span class="token punctuation">,</span>\n    CHANGE_AGE<span class="token punctuation">,</span>\n    CHANGE_XML<span class="token punctuation">,</span>\n    CHANGE_XML_Modify\n}\n</code></pre>\n<h4 id="ajs-2">a.js<a class="anchor" href="#ajs-2">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">export <span class="token keyword">const</span> CHANGE_NAME <span class="token operator">=</span>  <span class="token string">"CHANGE_NAME"</span>\n\n\n</code></pre>\n<h1>重要</h1>\n<p>在 App.js 中</p>\n<pre class="language-autoit"><code class="language-autoit">import { Provider } from <span class="token string">\'react-redux\'</span><span class="token comment">;</span>\nimport store from <span class="token string">"./store"</span><span class="token comment">;</span>\n<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> {\n    return <span class="token punctuation">(</span>\n      <span class="token operator">&lt;</span>ConfigProvider locale<span class="token operator">=</span>{zhCN}<span class="token operator">></span>\n        <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span>{store}<span class="token operator">></span>\n          <span class="token operator">&lt;</span>Router <span class="token operator">/</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>ConfigProvider<span class="token operator">></span>\n\n    <span class="token punctuation">)</span><span class="token comment">;</span>\n  }\n\n</code></pre>\n<h2 id="%E4%BD%BF%E7%94%A8">使用<a class="anchor" href="#%E4%BD%BF%E7%94%A8">§</a></h2>\n<h3 id="%E6%8E%A5%E6%94%B6%E6%96%B9">接收方<a class="anchor" href="#%E6%8E%A5%E6%94%B6%E6%96%B9">§</a></h3>\n<p>使用 useSelector</p>\n<pre class="language-autoit"><code class="language-autoit">import { useSelector } from <span class="token string">\'react-redux\'</span>\n<span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>state<span class="token punctuation">.</span>a<span class="token punctuation">)</span>\n</code></pre>\n<p>useSelector(state=&gt;state.reducers 中的文件名)，然后使用一个变量去接收</p>\n<p>这样变量就能拿到 store 里面对应文件中的所有状态</p>\n<h3 id="%E5%8F%91%E9%80%81%E6%96%B9">发送方<a class="anchor" href="#%E5%8F%91%E9%80%81%E6%96%B9">§</a></h3>\n<pre class="language-autoit"><code class="language-autoit">import { useDispatch } from <span class="token string">\'react-redux\'</span>\nimport { changeXmlModify } from <span class="token string">\'../../../../store/actions\'</span>\n<span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">changeXmlModify</span><span class="token punctuation">(</span>campaignForm<span class="token punctuation">.</span>xml<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n<p>useDispatch(action 名称（参数）)</p>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6" }, "\u5B89\u88C5\u63D2\u4EF6")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%85%8D%E7%BD%AE-store" }, "\u914D\u7F6E store"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#indexjs%E6%A8%A1%E6%9D%BF" }, "index.js\uFF08\u6A21\u677F\uFF09")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#reducers" }, "reducers"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#action" }, "action"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#actiontypes%E5%8F%AF%E4%BB%A5%E4%B8%8D%E8%A6%81" }, "actionTypes(\u53EF\u4EE5\u4E0D\u8981)"),
                React.createElement("ol", null)),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%BD%BF%E7%94%A8" }, "\u4F7F\u7528"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E6%8E%A5%E6%94%B6%E6%96%B9" }, "\u63A5\u6536\u65B9")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E5%8F%91%E9%80%81%E6%96%B9" }, "\u53D1\u9001\u65B9")))))),
    'author': undefined,
    'contributors': [],
    'date': "2023-07-09T04:34:25.511Z",
    'updated': null,
    'excerpt': "安装插件 react-redux redux:(react-redux 需要依赖于 redux 的 store) redux-thunk：异步 redux-devtools-extension:调试工具 配置 store 在 src 文件下，新建一个 store 的文件夹，里面需要有以下文件： - reducers 文件夹（...",
    'cover': undefined,
    'sidebar': [
        {
            "text": "介绍",
            "link": "docs/index.html",
            "pagePath": "docs/index.md"
        },
        {
            "text": "VUE3 相关",
            "link": "docs/vue3.html",
            "pagePath": "docs/vue3.md"
        },
        {
            "text": "前端代码规范插件配置",
            "link": "docs/codeRule.html",
            "pagePath": "docs/codeRule.md"
        },
        {
            "text": "使用 Redux",
            "link": "docs/redux.html",
            "pagePath": "docs/redux.md"
        }
    ]
};
