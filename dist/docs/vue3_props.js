import projectConfig from '/pagic.config.js';
export default {
    'prev': {
        "text": "介绍",
        "link": "docs/index.html"
    },
    'next': {
        "text": "前端代码规范插件配置",
        "link": "docs/codeRule.html"
    },
    config: { "root": "/", ...projectConfig, branch: '' },
    'pagePath': "docs/vue3.md",
    'layoutPath': "_layout.tsx",
    'outputPath': "docs/vue3.html",
    'title': "VUE3 相关",
    'content': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<h1>VUE3 相关</h1>\n<pre class="language-autoit"><code class="language-autoit"># npm <span class="token number">6</span><span class="token punctuation">.</span>x\nnpm create vite<span class="token variable">@latest</span> 你的项目名称 <span class="token operator">-</span><span class="token operator">-</span>template vue\n\n# npm <span class="token number">7</span><span class="token operator">+</span><span class="token punctuation">,</span> extra double<span class="token operator">-</span>dash is needed<span class="token punctuation">:</span>\nnpm create vite<span class="token variable">@latest</span> 你的项目名称 <span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token operator">-</span>template vue\n\n# yarn\nyarn create vite 你的项目名称 <span class="token operator">-</span><span class="token operator">-</span>template vue\n\n# pnpm\npnpm create vite 你的项目名称 <span class="token operator">-</span><span class="token operator">-</span>template vue\n</code></pre>\n<p>按照提示选择即可</p>\n<pre class="language-autoit"><code class="language-autoit">npm create vite<span class="token variable">@latest</span>\n</code></pre>\n<h1>使用 router</h1>\n<pre class="language-autoit"><code class="language-autoit">npm install vue<span class="token operator">-</span>router<span class="token variable">@4</span> <span class="token operator">-</span>S\n</code></pre>\n<h2 id="%E5%AE%89%E8%A3%85">安装<a class="anchor" href="#%E5%AE%89%E8%A3%85">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit">npm install vue<span class="token operator">-</span>router<span class="token variable">@4</span> <span class="token operator">-</span>S\n</code></pre>\n<h2 id="%E9%85%8D%E7%BD%AE">配置<a class="anchor" href="#%E9%85%8D%E7%BD%AE">§</a></h2>\n<p>在 src 目录下新建一个 router 文件夹以及对应的 index.js 文件</p>\n<pre class="language-autoit"><code class="language-autoit">import { createRouter<span class="token punctuation">,</span> createWebHistory } from <span class="token string">"vue-router"</span><span class="token comment">;</span>\nimport Home from <span class="token string">\'../views/Home\'</span>\n\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n    {\n        path<span class="token punctuation">:</span><span class="token string">\'/\'</span><span class="token punctuation">,</span>\n        name<span class="token punctuation">:</span><span class="token string">\'home\'</span><span class="token punctuation">,</span>\n        component<span class="token punctuation">:</span>Home\n    }\n<span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span>{\n    history<span class="token punctuation">:</span><span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    routes\n}<span class="token punctuation">)</span>\n\nexport <span class="token keyword">default</span> router\n</code></pre>\n<h2 id="%E5%BC%95%E5%85%A5-router">引入 router<a class="anchor" href="#%E5%BC%95%E5%85%A5-router">§</a></h2>\n<p>在 main.js 中进行引入</p>\n<pre class="language-autoit"><code class="language-autoit">import router from <span class="token string">\'./router\'</span>\n<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">\'#app\'</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E4%BF%AE%E6%94%B9-appvue">修改 App.vue<a class="anchor" href="#%E4%BF%AE%E6%94%B9-appvue">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>\n</code></pre>\n<h1>使用 Pinia</h1>\n<p>对比 vuex 的优点：</p>\n<ol>\n<li>\n<p>​ 体积小</p>\n</li>\n<li>\n<p>只有 state、actions、gatter，没有 mutation，actions 可以做同步和异步的操作</p>\n</li>\n<li>\n<p>分模块不需要 module</p>\n</li>\n<li>\n<p>pinia 可以直接进行修改数据，不需要通过 mutation</p>\n</li>\n</ol>\n<p>官方文档：<a href="https://pinia.vuejs.org/zh/introduction.html">简介 | Pinia (vuejs.org)</a></p>\n<h2 id="%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">使用方法<a class="anchor" href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">§</a></h2>\n<h2 id="%E5%AE%89%E8%A3%85-1">安装<a class="anchor" href="#%E5%AE%89%E8%A3%85-1">§</a></h2>\n<blockquote>\n<p>npm install pinia</p>\n</blockquote>\n<h2 id="%E5%88%9B%E5%BB%BA-store">创建 store<a class="anchor" href="#%E5%88%9B%E5%BB%BA-store">§</a></h2>\n<p>在根目录下面新建 index.js</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"pinia"</span><span class="token punctuation">;</span>\n\n<span class="token keyword module">import</span> <span class="token imports">piniaPluginPersistedstate</span> <span class="token keyword module">from</span> <span class="token string">"pinia-plugin-persistedstate"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\npinia<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>piniaPluginPersistedstate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> pinia<span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%BC%95%E5%85%A5-mainjs">引入 main.js<a class="anchor" href="#%E5%BC%95%E5%85%A5-mainjs">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit">import pinia from <span class="token string">\'./store\'</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E5%88%9B%E5%BB%BA%E5%AF%B9%E5%BA%94%E6%96%87%E4%BB%B6">创建对应文件<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E5%AF%B9%E5%BA%94%E6%96%87%E4%BB%B6">§</a></h2>\n<p>在 store 中创建 shop.js</p>\n<pre class="language-autoit"><code class="language-autoit">import { defineStore } from <span class="token string">"pinia"</span><span class="token comment">;</span>\n\nexport <span class="token keyword">const</span> useShopStore  <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">\'shop\'</span><span class="token punctuation">,</span>{\n    state<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{\n        return {\n            num<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>\n            name<span class="token punctuation">:</span><span class="token string">\'张三\'</span>\n        }\n    }<span class="token punctuation">,</span>\n    getters<span class="token punctuation">:</span>{\n        doubleCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token function">doublePlusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n            return this<span class="token punctuation">.</span>doubleCount <span class="token operator">+</span> <span class="token number">1</span>\n          }<span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n    actions<span class="token punctuation">:</span>{\n                <span class="token function">handleCi</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>{\n                    this<span class="token punctuation">.</span>num <span class="token operator">+=</span>val\n                }\n    }\n}<span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8">在项目中使用<a class="anchor" href="#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useShopStore <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"../../store/user.js"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> shopstore <span class="token operator">=</span> <span class="token function">useShopStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> num <span class="token punctuation">}</span> <span class="token operator">=</span> shopstore<span class="token punctuation">;</span> <span class="token comment">//这里的name和num就是我们定义的数据</span>\n</code></pre>\n<h3 id="%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE">修改数据<a class="anchor" href="#%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE">§</a></h3>\n<h4 id="%E5%8D%95%E7%8B%AC%E4%BF%AE%E6%94%B9">单独修改<a class="anchor" href="#%E5%8D%95%E7%8B%AC%E4%BF%AE%E6%94%B9">§</a></h4>\n<p>我们需要引入<strong>storeToRefs</strong>，把数据变成响应式数据，通过 value 进行修改</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> num<span class="token punctuation">,</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>shopstore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">changeName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9">批量修改<a class="anchor" href="#%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">   shopstore<span class="token punctuation">.</span>$<span class="token function">patch</span><span class="token punctuation">(</span>state<span class="token operator">=</span><span class="token operator">></span>{\n        state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'李四\'</span>\n        state<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">11</span>\n    }<span class="token punctuation">)</span>\n</code></pre>\n<h3 id="gatter">Gatter<a class="anchor" href="#gatter">§</a></h3>\n<p>Getter 完全等同于 store 的 state 的<a href="https://cn.vuejs.org/guide/essentials/computed.html">计算属性</a>。可以通过 <code>defineStore()</code> 中的 <code>getters</code> 属性来定义它们。<strong>推荐</strong>使用箭头函数，并且它将接收 <code>state</code> 作为第一个参数：</p>\n<p>gatter 是有缓存的</p>\n<pre class="language-autoit"><code class="language-autoit">    getters<span class="token punctuation">:</span>{\n        doubleCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token function">doublePlusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n            return this<span class="token punctuation">.</span>doubleCount <span class="token operator">+</span> <span class="token number">1</span>\n          }<span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit">    let {num<span class="token punctuation">,</span>name<span class="token punctuation">,</span>doubleCount} <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>\n</code></pre>\n<h3 id="actions">Actions<a class="anchor" href="#actions">§</a></h3>\n<p>直接使用 store.方法名即可</p>\n<pre class="language-autoit"><code class="language-autoit">  actions<span class="token punctuation">:</span>{\n                <span class="token function">handleCi</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>{\n                    this<span class="token punctuation">.</span>num <span class="token operator">+=</span>val\n                }\n    }\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">&lt;</span>button <span class="token variable">@click</span><span class="token operator">=</span><span class="token string">"useAction"</span><span class="token operator">></span>使用action<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n\n<span class="token keyword">const</span> useAction<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{\n    shopstore<span class="token punctuation">.</span><span class="token function">handleCi</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>\n}\n</code></pre>\n<h2 id="%E6%A8%A1%E5%9D%97%E5%8C%96">模块化<a class="anchor" href="#%E6%A8%A1%E5%9D%97%E5%8C%96">§</a></h2>\n<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230314103941461.png" alt="image-20230314103941461"></p>\n<p>只需要引入不同的文件即可</p>\n<h2 id="%E6%8C%81%E4%B9%85%E5%8C%96">持久化<a class="anchor" href="#%E6%8C%81%E4%B9%85%E5%8C%96">§</a></h2>\n<p>我们使用插件进行持久化</p>\n<h2 id="%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6">下载插件<a class="anchor" href="#%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit"> npm install pinia<span class="token operator">-</span>plugin<span class="token operator">-</span>persistedstate\n</code></pre>\n<h2 id="%E5%9C%A8-store-%E4%B8%AD%E7%9A%84-indexjs-%E8%BF%9B%E8%A1%8C%E5%BC%95%E5%85%A5">在 store 中的 index.js 进行引入<a class="anchor" href="#%E5%9C%A8-store-%E4%B8%AD%E7%9A%84-indexjs-%E8%BF%9B%E8%A1%8C%E5%BC%95%E5%85%A5">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit">  import piniaPluginPersistedstate from <span class="token string">\'pinia-plugin-persistedstate\'</span>\n\n    pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>piniaPluginPersistedstate<span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E4%BD%BF%E7%94%A8%E6%8C%81%E4%B9%85%E5%8C%96">使用持久化<a class="anchor" href="#%E4%BD%BF%E7%94%A8%E6%8C%81%E4%B9%85%E5%8C%96">§</a></h2>\n<p>在需要使用持久化的对应 store 文件中加入</p>\n<pre class="language-autoit"><code class="language-autoit">    <span class="token operator">/</span><span class="token operator">/</span>开启持久化\n    persist<span class="token punctuation">:</span>{\n        enable<span class="token punctuation">:</span><span class="token boolean">true</span>\n    }\n</code></pre>\n<p>他会在浏览器的本地存储中，以你设置的 storeId 作为 Key，value 为你的 state</p>\n<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230314105157778.png" alt="image-20230314105157778"></p>\n<h1>设置代理，解决跨域问题</h1>\n<p>在 vite.config.js 中</p>\n<pre class="language-autoit"><code class="language-autoit">import { defineConfig } from <span class="token string">\'vite\'</span>\nimport vue from <span class="token string">\'@vitejs/plugin-vue\'</span>\nimport AutoImport from <span class="token string">\'unplugin-auto-import/vite\'</span>\nexport <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span>{\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">AutoImport</span><span class="token punctuation">(</span>{\n        imports<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">\'vue\'</span><span class="token punctuation">,</span><span class="token string">\'vue-router\'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token operator">/</span>自动导入vue和vue<span class="token operator">-</span>router相关函数\n      }<span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n   server<span class="token punctuation">:</span>{\n    proxy<span class="token punctuation">:</span>{\n      <span class="token string">\'/api\'</span><span class="token punctuation">:</span><span class="token string">\'<a class="token url-link" href="http://testapi.xuexiluxian.cn">http://testapi.xuexiluxian.cn</a>\'</span>\n    }\n  }\n}<span class="token punctuation">)</span>\n</code></pre>\n<h1>axios 二次封装</h1>\n<p>新建一个 utils 文件夹，新建 request.js 在里面进行我们的 axios 二次封装</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports">axios</span> <span class="token keyword module">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>\n\n<span class="token comment">//1. 创建axios对象</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//2. 请求拦截器</span>\nhttp<span class="token punctuation">.</span><span class="token property-access">interceptors</span><span class="token punctuation">.</span><span class="token property-access">request</span><span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> config<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//3. 响应拦截器</span>\nhttp<span class="token punctuation">.</span><span class="token property-access">interceptors</span><span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//判断code码</span>\n    <span class="token keyword control-flow">return</span> response<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> http<span class="token punctuation">;</span>\n</code></pre>\n<p>请求 api</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports">request</span> <span class="token keyword module">from</span> <span class="token string">"../utils/request"</span><span class="token punctuation">;</span>\n\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">mostNew</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">"/api/course/mostNew"</span><span class="token punctuation">,</span>\n    method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>\n    data<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'head': null,
    'script': React.createElement(React.Fragment, null,
        React.createElement("script", { src: "https://cdn.pagic.org/react@18.2.0/umd/react.production.min.js" }),
        React.createElement("script", { src: "https://cdn.pagic.org/react-dom@18.2.0/umd/react-dom.production.min.js" }),
        React.createElement("script", { src: "/index.js", type: "module" })),
    'footer': React.createElement("footer", null,
        "Power By",
        React.createElement("a", { href: "https://github.com/JieHaoCai", target: "_blank" }, "JsonTsai")),
    'contentTitle': React.createElement("h1", { key: "0" }, "VUE3 \u76F8\u5173"),
    'contentBody': React.createElement("article", { dangerouslySetInnerHTML: {
            __html: '<pre class="language-autoit"><code class="language-autoit"># npm <span class="token number">6</span><span class="token punctuation">.</span>x\nnpm create vite<span class="token variable">@latest</span> 你的项目名称 <span class="token operator">-</span><span class="token operator">-</span>template vue\n\n# npm <span class="token number">7</span><span class="token operator">+</span><span class="token punctuation">,</span> extra double<span class="token operator">-</span>dash is needed<span class="token punctuation">:</span>\nnpm create vite<span class="token variable">@latest</span> 你的项目名称 <span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token operator">-</span>template vue\n\n# yarn\nyarn create vite 你的项目名称 <span class="token operator">-</span><span class="token operator">-</span>template vue\n\n# pnpm\npnpm create vite 你的项目名称 <span class="token operator">-</span><span class="token operator">-</span>template vue\n</code></pre>\n<p>按照提示选择即可</p>\n<pre class="language-autoit"><code class="language-autoit">npm create vite<span class="token variable">@latest</span>\n</code></pre>\n<h1>使用 router</h1>\n<pre class="language-autoit"><code class="language-autoit">npm install vue<span class="token operator">-</span>router<span class="token variable">@4</span> <span class="token operator">-</span>S\n</code></pre>\n<h2 id="%E5%AE%89%E8%A3%85">安装<a class="anchor" href="#%E5%AE%89%E8%A3%85">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit">npm install vue<span class="token operator">-</span>router<span class="token variable">@4</span> <span class="token operator">-</span>S\n</code></pre>\n<h2 id="%E9%85%8D%E7%BD%AE">配置<a class="anchor" href="#%E9%85%8D%E7%BD%AE">§</a></h2>\n<p>在 src 目录下新建一个 router 文件夹以及对应的 index.js 文件</p>\n<pre class="language-autoit"><code class="language-autoit">import { createRouter<span class="token punctuation">,</span> createWebHistory } from <span class="token string">"vue-router"</span><span class="token comment">;</span>\nimport Home from <span class="token string">\'../views/Home\'</span>\n\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n    {\n        path<span class="token punctuation">:</span><span class="token string">\'/\'</span><span class="token punctuation">,</span>\n        name<span class="token punctuation">:</span><span class="token string">\'home\'</span><span class="token punctuation">,</span>\n        component<span class="token punctuation">:</span>Home\n    }\n<span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span>{\n    history<span class="token punctuation">:</span><span class="token function">createWebHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    routes\n}<span class="token punctuation">)</span>\n\nexport <span class="token keyword">default</span> router\n</code></pre>\n<h2 id="%E5%BC%95%E5%85%A5-router">引入 router<a class="anchor" href="#%E5%BC%95%E5%85%A5-router">§</a></h2>\n<p>在 main.js 中进行引入</p>\n<pre class="language-autoit"><code class="language-autoit">import router from <span class="token string">\'./router\'</span>\n<span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">\'#app\'</span><span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E4%BF%AE%E6%94%B9-appvue">修改 App.vue<a class="anchor" href="#%E4%BF%AE%E6%94%B9-appvue">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>\n</code></pre>\n<h1>使用 Pinia</h1>\n<p>对比 vuex 的优点：</p>\n<ol>\n<li>\n<p>​ 体积小</p>\n</li>\n<li>\n<p>只有 state、actions、gatter，没有 mutation，actions 可以做同步和异步的操作</p>\n</li>\n<li>\n<p>分模块不需要 module</p>\n</li>\n<li>\n<p>pinia 可以直接进行修改数据，不需要通过 mutation</p>\n</li>\n</ol>\n<p>官方文档：<a href="https://pinia.vuejs.org/zh/introduction.html">简介 | Pinia (vuejs.org)</a></p>\n<h2 id="%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">使用方法<a class="anchor" href="#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95">§</a></h2>\n<h2 id="%E5%AE%89%E8%A3%85-1">安装<a class="anchor" href="#%E5%AE%89%E8%A3%85-1">§</a></h2>\n<blockquote>\n<p>npm install pinia</p>\n</blockquote>\n<h2 id="%E5%88%9B%E5%BB%BA-store">创建 store<a class="anchor" href="#%E5%88%9B%E5%BB%BA-store">§</a></h2>\n<p>在根目录下面新建 index.js</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"pinia"</span><span class="token punctuation">;</span>\n\n<span class="token keyword module">import</span> <span class="token imports">piniaPluginPersistedstate</span> <span class="token keyword module">from</span> <span class="token string">"pinia-plugin-persistedstate"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> pinia <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\npinia<span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>piniaPluginPersistedstate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> pinia<span class="token punctuation">;</span>\n</code></pre>\n<h2 id="%E5%BC%95%E5%85%A5-mainjs">引入 main.js<a class="anchor" href="#%E5%BC%95%E5%85%A5-mainjs">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit">import pinia from <span class="token string">\'./store\'</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>pinia<span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E5%88%9B%E5%BB%BA%E5%AF%B9%E5%BA%94%E6%96%87%E4%BB%B6">创建对应文件<a class="anchor" href="#%E5%88%9B%E5%BB%BA%E5%AF%B9%E5%BA%94%E6%96%87%E4%BB%B6">§</a></h2>\n<p>在 store 中创建 shop.js</p>\n<pre class="language-autoit"><code class="language-autoit">import { defineStore } from <span class="token string">"pinia"</span><span class="token comment">;</span>\n\nexport <span class="token keyword">const</span> useShopStore  <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">\'shop\'</span><span class="token punctuation">,</span>{\n    state<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{\n        return {\n            num<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>\n            name<span class="token punctuation">:</span><span class="token string">\'张三\'</span>\n        }\n    }<span class="token punctuation">,</span>\n    getters<span class="token punctuation">:</span>{\n        doubleCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token function">doublePlusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n            return this<span class="token punctuation">.</span>doubleCount <span class="token operator">+</span> <span class="token number">1</span>\n          }<span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n    actions<span class="token punctuation">:</span>{\n                <span class="token function">handleCi</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>{\n                    this<span class="token punctuation">.</span>num <span class="token operator">+=</span>val\n                }\n    }\n}<span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8">在项目中使用<a class="anchor" href="#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8">§</a></h2>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useShopStore <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"../../store/user.js"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> shopstore <span class="token operator">=</span> <span class="token function">useShopStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> num <span class="token punctuation">}</span> <span class="token operator">=</span> shopstore<span class="token punctuation">;</span> <span class="token comment">//这里的name和num就是我们定义的数据</span>\n</code></pre>\n<h3 id="%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE">修改数据<a class="anchor" href="#%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE">§</a></h3>\n<h4 id="%E5%8D%95%E7%8B%AC%E4%BF%AE%E6%94%B9">单独修改<a class="anchor" href="#%E5%8D%95%E7%8B%AC%E4%BF%AE%E6%94%B9">§</a></h4>\n<p>我们需要引入<strong>storeToRefs</strong>，把数据变成响应式数据，通过 value 进行修改</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">{</span> num<span class="token punctuation">,</span> name <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>shopstore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">changeName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">.</span><span class="token property-access">value</span> <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre>\n<h4 id="%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9">批量修改<a class="anchor" href="#%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9">§</a></h4>\n<pre class="language-autoit"><code class="language-autoit">   shopstore<span class="token punctuation">.</span>$<span class="token function">patch</span><span class="token punctuation">(</span>state<span class="token operator">=</span><span class="token operator">></span>{\n        state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'李四\'</span>\n        state<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">11</span>\n    }<span class="token punctuation">)</span>\n</code></pre>\n<h3 id="gatter">Gatter<a class="anchor" href="#gatter">§</a></h3>\n<p>Getter 完全等同于 store 的 state 的<a href="https://cn.vuejs.org/guide/essentials/computed.html">计算属性</a>。可以通过 <code>defineStore()</code> 中的 <code>getters</code> 属性来定义它们。<strong>推荐</strong>使用箭头函数，并且它将接收 <code>state</code> 作为第一个参数：</p>\n<p>gatter 是有缓存的</p>\n<pre class="language-autoit"><code class="language-autoit">    getters<span class="token punctuation">:</span>{\n        doubleCount<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>\n        <span class="token function">doublePlusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>{\n            return this<span class="token punctuation">.</span>doubleCount <span class="token operator">+</span> <span class="token number">1</span>\n          }<span class="token punctuation">,</span>\n    }<span class="token punctuation">,</span>\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit">    let {num<span class="token punctuation">,</span>name<span class="token punctuation">,</span>doubleCount} <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>\n</code></pre>\n<h3 id="actions">Actions<a class="anchor" href="#actions">§</a></h3>\n<p>直接使用 store.方法名即可</p>\n<pre class="language-autoit"><code class="language-autoit">  actions<span class="token punctuation">:</span>{\n                <span class="token function">handleCi</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>{\n                    this<span class="token punctuation">.</span>num <span class="token operator">+=</span>val\n                }\n    }\n</code></pre>\n<pre class="language-autoit"><code class="language-autoit"><span class="token operator">&lt;</span>button <span class="token variable">@click</span><span class="token operator">=</span><span class="token string">"useAction"</span><span class="token operator">></span>使用action<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n\n<span class="token keyword">const</span> useAction<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>{\n    shopstore<span class="token punctuation">.</span><span class="token function">handleCi</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>\n}\n</code></pre>\n<h2 id="%E6%A8%A1%E5%9D%97%E5%8C%96">模块化<a class="anchor" href="#%E6%A8%A1%E5%9D%97%E5%8C%96">§</a></h2>\n<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230314103941461.png" alt="image-20230314103941461"></p>\n<p>只需要引入不同的文件即可</p>\n<h2 id="%E6%8C%81%E4%B9%85%E5%8C%96">持久化<a class="anchor" href="#%E6%8C%81%E4%B9%85%E5%8C%96">§</a></h2>\n<p>我们使用插件进行持久化</p>\n<h2 id="%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6">下载插件<a class="anchor" href="#%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit"> npm install pinia<span class="token operator">-</span>plugin<span class="token operator">-</span>persistedstate\n</code></pre>\n<h2 id="%E5%9C%A8-store-%E4%B8%AD%E7%9A%84-indexjs-%E8%BF%9B%E8%A1%8C%E5%BC%95%E5%85%A5">在 store 中的 index.js 进行引入<a class="anchor" href="#%E5%9C%A8-store-%E4%B8%AD%E7%9A%84-indexjs-%E8%BF%9B%E8%A1%8C%E5%BC%95%E5%85%A5">§</a></h2>\n<pre class="language-autoit"><code class="language-autoit">  import piniaPluginPersistedstate from <span class="token string">\'pinia-plugin-persistedstate\'</span>\n\n    pinia<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>piniaPluginPersistedstate<span class="token punctuation">)</span>\n</code></pre>\n<h2 id="%E4%BD%BF%E7%94%A8%E6%8C%81%E4%B9%85%E5%8C%96">使用持久化<a class="anchor" href="#%E4%BD%BF%E7%94%A8%E6%8C%81%E4%B9%85%E5%8C%96">§</a></h2>\n<p>在需要使用持久化的对应 store 文件中加入</p>\n<pre class="language-autoit"><code class="language-autoit">    <span class="token operator">/</span><span class="token operator">/</span>开启持久化\n    persist<span class="token punctuation">:</span>{\n        enable<span class="token punctuation">:</span><span class="token boolean">true</span>\n    }\n</code></pre>\n<p>他会在浏览器的本地存储中，以你设置的 storeId 作为 Key，value 为你的 state</p>\n<p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230314105157778.png" alt="image-20230314105157778"></p>\n<h1>设置代理，解决跨域问题</h1>\n<p>在 vite.config.js 中</p>\n<pre class="language-autoit"><code class="language-autoit">import { defineConfig } from <span class="token string">\'vite\'</span>\nimport vue from <span class="token string">\'@vitejs/plugin-vue\'</span>\nimport AutoImport from <span class="token string">\'unplugin-auto-import/vite\'</span>\nexport <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span>{\n    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n      <span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token function">AutoImport</span><span class="token punctuation">(</span>{\n        imports<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">\'vue\'</span><span class="token punctuation">,</span><span class="token string">\'vue-router\'</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token operator">/</span>自动导入vue和vue<span class="token operator">-</span>router相关函数\n      }<span class="token punctuation">)</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n   server<span class="token punctuation">:</span>{\n    proxy<span class="token punctuation">:</span>{\n      <span class="token string">\'/api\'</span><span class="token punctuation">:</span><span class="token string">\'<a class="token url-link" href="http://testapi.xuexiluxian.cn">http://testapi.xuexiluxian.cn</a>\'</span>\n    }\n  }\n}<span class="token punctuation">)</span>\n</code></pre>\n<h1>axios 二次封装</h1>\n<p>新建一个 utils 文件夹，新建 request.js 在里面进行我们的 axios 二次封装</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports">axios</span> <span class="token keyword module">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>\n\n<span class="token comment">//1. 创建axios对象</span>\n<span class="token keyword">const</span> http <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//2. 请求拦截器</span>\nhttp<span class="token punctuation">.</span><span class="token property-access">interceptors</span><span class="token punctuation">.</span><span class="token property-access">request</span><span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> config<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//3. 响应拦截器</span>\nhttp<span class="token punctuation">.</span><span class="token property-access">interceptors</span><span class="token punctuation">.</span><span class="token property-access">response</span><span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">//判断code码</span>\n    <span class="token keyword control-flow">return</span> response<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword module">export</span> <span class="token keyword module">default</span> http<span class="token punctuation">;</span>\n</code></pre>\n<p>请求 api</p>\n<pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports">request</span> <span class="token keyword module">from</span> <span class="token string">"../utils/request"</span><span class="token punctuation">;</span>\n\n<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function">mostNew</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword control-flow">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">"/api/course/mostNew"</span><span class="token punctuation">,</span>\n    method<span class="token operator">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>\n    data<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>'
        } }),
    'toc': React.createElement("nav", { key: "0", className: "toc" },
        React.createElement("ol", null,
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%AE%89%E8%A3%85" }, "\u5B89\u88C5")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E9%85%8D%E7%BD%AE" }, "\u914D\u7F6E")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%BC%95%E5%85%A5-router" }, "\u5F15\u5165 router")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%BF%AE%E6%94%B9-appvue" }, "\u4FEE\u6539 App.vue")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95" }, "\u4F7F\u7528\u65B9\u6CD5")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%AE%89%E8%A3%85-1" }, "\u5B89\u88C5")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%88%9B%E5%BB%BA-store" }, "\u521B\u5EFA store")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%BC%95%E5%85%A5-mainjs" }, "\u5F15\u5165 main.js")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%88%9B%E5%BB%BA%E5%AF%B9%E5%BA%94%E6%96%87%E4%BB%B6" }, "\u521B\u5EFA\u5BF9\u5E94\u6587\u4EF6")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8" }, "\u5728\u9879\u76EE\u4E2D\u4F7F\u7528"),
                React.createElement("ol", null,
                    React.createElement("li", null,
                        React.createElement("a", { href: "#%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE" }, "\u4FEE\u6539\u6570\u636E"),
                        React.createElement("ol", null)),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#gatter" }, "Gatter")),
                    React.createElement("li", null,
                        React.createElement("a", { href: "#actions" }, "Actions")))),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%A8%A1%E5%9D%97%E5%8C%96" }, "\u6A21\u5757\u5316")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E6%8C%81%E4%B9%85%E5%8C%96" }, "\u6301\u4E45\u5316")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%B8%8B%E8%BD%BD%E6%8F%92%E4%BB%B6" }, "\u4E0B\u8F7D\u63D2\u4EF6")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E5%9C%A8-store-%E4%B8%AD%E7%9A%84-indexjs-%E8%BF%9B%E8%A1%8C%E5%BC%95%E5%85%A5" }, "\u5728 store \u4E2D\u7684 index.js \u8FDB\u884C\u5F15\u5165")),
            React.createElement("li", null,
                React.createElement("a", { href: "#%E4%BD%BF%E7%94%A8%E6%8C%81%E4%B9%85%E5%8C%96" }, "\u4F7F\u7528\u6301\u4E45\u5316")))),
    'author': undefined,
    'contributors': [],
    'date': "2023-07-09T04:34:25.511Z",
    'updated': null,
    'excerpt': "# npm 6.x npm create vite@latest 你的项目名称 --template vue # npm 7+, extra double-dash is needed: npm create vite@latest 你的项目名称 -- --template vue # yarn yarn create vite 你的项目名称 --template vue # pn...",
    'cover': "C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230314103941461.png",
    'sidebar': [
        {
            "text": "介绍",
            "link": "docs/index.html",
            "pagePath": "docs/index.md"
        },
        {
            "text": "VUE3 相关",
            "link": "docs/vue3.html",
            "pagePath": "docs/vue3.md"
        },
        {
            "text": "前端代码规范插件配置",
            "link": "docs/codeRule.html",
            "pagePath": "docs/codeRule.md"
        },
        {
            "text": "使用 Redux",
            "link": "docs/redux.html",
            "pagePath": "docs/redux.md"
        }
    ]
};
